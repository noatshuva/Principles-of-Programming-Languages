(define last-element
  (lambda (lst)
    (if ( eq? (cdr lst) '())
        (car lst)
        (last-element(cdr lst)))
   )
)

(define power
  (lambda (n1 n2)
    (if ( = n2 0)
        1
        (* n1 (power n1 (- n2 1))))
   )
)

(define sum-lst-power
    (lambda (lst n)
      (if ( eq? lst '())
          0
            (+ (power (car lst) n)(sum-lst-power (cdr lst) n))
       )
    )
 )
      
 
(define count-lst
  (lambda (lst n)
    (if (eq? lst '())
        n
        (count-lst (cdr lst) (+ n 1))
        )
    )
  )

(define num-from-digits
  (lambda (lst)
    (if ( eq? lst '())
          0
          (+(* (car lst) (power 10 (- (count-lst lst 0) 1))) (num-from-digits (cdr lst))))
    )
  )

(define is-narcissistic
  (lambda (lst)
       (if(eq? (sum-lst-power lst (count-lst lst 0)) (num-from-digits lst))
          #t
          #f)
    )
)
 
 
